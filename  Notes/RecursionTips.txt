Tips for approaching recursion problems
 1. define your base case 1st! using simple inputs and outputs
 2. test base case using simplest possible input that results in one recursive call
 3. then test against more complex inputs


NOTE NOTE NOTE: the call stack builds up with each iteration and once the base case is reached, the return value is passed back down as each invocation pops off the top of the stack.

So, for example, if reversing an array [1, 2, 3, 4] the call stack gets the values
4, then 3, then 2 then 1; those values are stacked one on top of the other first (4) at bottom and last (1) on top and then when the "return" part of your code is reached those values pop off the stack from the top to the bottom -> 1 first, 4 last.

 
 const reverseArray = (array) => {
    if(array.length === 1) return array.slice();

    const lastElement = array[array.length - 1];

    return [lastElement].concat(reverseArray(array.slice(0, -1)));
}


INPUT:
[1, 2, 3, 4] 

STACK:
[1]
[2] concat reverseArray([1])
[3] concat reverseArray([1, 2])
[4] concat reverseArray([1, 2, 3])

THEN when stack is unwound:
[1]  = value
value = [2] concat value => [2, 1]
value = [3] concat value => [3, 2, 1]
value = [4] concat value => [4, 3, 2, 1]


FINAL RESULT:
[4, 3, 2, 1] 




"Due to the way the execution stack operates, it's as if each function invocation pauses in time when a recursive call is made. The function that pauses before a recursive call will resume once the recursive call completes."

// **************************************************************

NOTE:
CALL STACK is like a stack of books. You add to the TOP of the stack and you remove from the TOP of the stack.  Last In = First Out.


EXAMPLE: 5 factorial => 5! => 5 * 4 * 3 * 2 * 1
LOGIC = return num * num - 1, stop when num === 1

factorial (num) {
// base case
 if(num === 0  || num === 1){
 		return 1;
    }
 
// recursive case
	return num * factorial(num - 1);
}


CALL STACK looks like:
1					- added last, unwound first
2 * factorial(1)
3 * factorial(2)
4 * factorial(3)
5 * factorial(4)	- added first, unwound last

UNWINDING THE STACK looks like this:
1
then 2 * 1 => 2
then 3 * 2 => 6
then 4 * 6 => 24
then 5 * 24 => 120

ANOTHER WAY OF DESCRIBING UNWINDING THE STACK:
value
then value = 2 * value
then value = 3 * value
then value = 4 * value
then value = 5 * value


Each iteration goes to the TOP of the stack, pushing down previous values.
When "return" is done it unwinds the stack from the TOP down.

Stack has:
1  - added last, unwound first
2  - then this
3  - then this
4  - then this
5  - added first, unwound last

// **************************************************************

 RECURSION AND ARRAYS AND STRINGS
 1.  base case = empty array or length = 1

 2.  if array.length === 1, sum is easy to calculate, sum = array[0]

 3.  if the base case requires the iterable to have a length of 1 or 0 it means that the recursive case has to reduce the length of the iterable with every recursive call 

 4. what type of thing should function return?  base case and recursive case should return the SAME type of thing!

 5. using recursion with:
 
-- outside for loops:
 
 
-- inside for loops:
 
 
-- nested arrrays:
 